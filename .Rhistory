return(formatted_table)
}
# SQL Query for selecting IDs and key variables
EczemaWiseData <- paste(readLines("G:\\.shortcut-targets-by-id\\0B_jvJu6-GsL_ZVQtb2ZVeHhnNlk\\Research\\For Bryan\\SQL\\User Statistics.sql"), collapse = " ")
# Execute the query and store the result in a data frame
EczemaWiseData <- dbGetQuery(EW_Database, EczemaWiseData)
# SQL Query for selecting Provider Prep data
ProviderPrepData <- paste(readLines("G:\\.shortcut-targets-by-id\\0B_jvJu6-GsL_ZVQtb2ZVeHhnNlk\\Research\\For Bryan\\SQL\\Provider Prep Pull.sql"), collapse = " ")
# Execute the query and store the result in a data frame
ProviderPrepData <- dbGetQuery(EW_Database, ProviderPrepData)
# Close the database connection when done
dbDisconnect(EW_Database)
# Import RUCA Data
RUCA <- read_excel("G:\\.shortcut-targets-by-id\\0B_jvJu6-GsL_ZVQtb2ZVeHhnNlk\\Research\\For Bryan\\Dashboards\\Dependencies for Dashboards\\RUCA2010Data.xlsx")
# Rename RUCA data
RUCA <- select(RUCA, zip = ZIP_CODE, state_abv = STATE, RUCA1)
# Merge RUCA states to EW zips
EczemaWiseData <- merge(EczemaWiseData, RUCA, all.x = TRUE)
View(EczemaWiseData)
# Recode RUCA Values
EczemaWiseData <- EczemaWiseData %>%
mutate(
urbanicity = case_when(
RUCA1 == 1 ~ "(1) Metropolitan core",
RUCA1 == 2 ~ "(2) Metropolitan high commute",
RUCA1 == 3 ~ "(3) Metropolitan low commute",
RUCA1 == 4 ~ "(4) Micropolitan core",
RUCA1 == 5 ~ "(5) Micropolitan high commute",
RUCA1 == 6 ~ "(6) Micropolitan low commute",
RUCA1 == 7 ~ "(7) Small town core",
RUCA1 == 8 ~ "(8) Small town high commute",
RUCA1 == 9 ~ "(9) Small town low commute",
RUCA1 == 10 ~ "(10) Rural"
)
) %>%
mutate(
urbanicity_simple = case_when(
RUCA1 %in% c(1, 2, 3) ~ "Metropolitan",
RUCA1 %in% c(4, 5, 6, 7, 8, 9, 10) ~ "Micropolitan/Small Town/Rural"
)
)
invalidZips <- EczemaWiseData[is.na(EczemaWiseData$urbanicity), ]
View(invalidZips)
View(EczemaWiseData)
# Install Packages: List all Packages Needed in the All_Packages Variable
All_Packages <- c("dplyr", "tidyverse", "ggplot2", "knitr", "kableExtra", "gridExtra", "cowplot", "ggpubr", "reshape2", "readxl", "janitor", "RODBC", "odbc", "RPostgres", "yaml", "rmarkdown", "htmltools", "xtable", "caret")
New_Packages <- All_Packages[!(All_Packages %in% installed.packages()[,"Package"])]
if(length(New_Packages)) install.packages(New_Packages)
# Load Packages
library(dplyr)
library(tidyverse)
library(knitr)
library(ggplot2)
library(kableExtra)
library(gridExtra)
library(cowplot)
library(ggpubr)
library(reshape2)
library(readxl)
library(janitor)
library(RODBC)
library(odbc)
library(RPostgres)
library(yaml)
library(rmarkdown)
library(htmltools)
library(xtable)
# Empty Global Environment
rm(list = ls())
# Read credentials from YAML file
EW_Database_Credentials <- yaml::read_yaml("G:\\.shortcut-targets-by-id\\0B_jvJu6-GsL_ZVQtb2ZVeHhnNlk\\Research\\For Bryan\\SQL\\Credentials\\EW_Database_Credentials.yaml")
# Connect to EW Database
EW_Database <- dbConnect(
RPostgres::Postgres(),
dbname = EW_Database_Credentials$database$dbname,
host = EW_Database_Credentials$database$host,
port = EW_Database_Credentials$database$port,
user = EW_Database_Credentials$database$user,
password = EW_Database_Credentials$database$password
)
# Function to create and format tables with percentages multiplied by 100 and rounded
create_formatted_table <- function(data, variable, custom_names = NULL) {
# Convert variable to factor with explicit levels and sort levels by frequency
data[[variable]] <- forcats::fct_infreq(factor(data[[variable]]))
# Create frequency table without the "Number" column
table_data <- janitor::tabyl(data[[variable]], show_na = FALSE) %>%
janitor::remove_empty()
# Rename columns if custom_names are provided
if (!is.null(custom_names)) {
names(table_data) <- custom_names
}
# Calculate percentage, multiply by 100, and round to 2 decimal places
table_data$Percentage <- round(100 * table_data$Percentage, 2)
# Sort by Percentage column (assuming it's the second column)
table_data <- table_data %>%
dplyr::arrange(desc(Percentage))
formatted_table <- table_data %>%
knitr::kable("html", escape = FALSE) %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
return(formatted_table)
}
# SQL Query for selecting IDs and key variables
EczemaWiseData <- paste(readLines("G:\\.shortcut-targets-by-id\\0B_jvJu6-GsL_ZVQtb2ZVeHhnNlk\\Research\\For Bryan\\SQL\\User Statistics.sql"), collapse = " ")
# Execute the query and store the result in a data frame
EczemaWiseData <- dbGetQuery(EW_Database, EczemaWiseData)
# SQL Query for selecting Provider Prep data
ProviderPrepData <- paste(readLines("G:\\.shortcut-targets-by-id\\0B_jvJu6-GsL_ZVQtb2ZVeHhnNlk\\Research\\For Bryan\\SQL\\Provider Prep Pull.sql"), collapse = " ")
# Execute the query and store the result in a data frame
ProviderPrepData <- dbGetQuery(EW_Database, ProviderPrepData)
# Close the database connection when done
dbDisconnect(EW_Database)
# Import RUCA Data
RUCA <- read_excel("G:\\.shortcut-targets-by-id\\0B_jvJu6-GsL_ZVQtb2ZVeHhnNlk\\Research\\For Bryan\\Dashboards\\Dependencies for Dashboards\\RUCA2010Data.xlsx")
# Rename RUCA data
RUCA <- select(RUCA, zip = ZIP_CODE, state_abv = STATE, RUCA1)
# Merge RUCA states to EW zips
EczemaWiseData <- merge(EczemaWiseData, RUCA, all.x = TRUE)
# Merge RUCA states to EW zips
EczemaWiseData <- merge(ProviderPrepData, EczemaWiseData, all.x = TRUE)
# Recode RUCA Values
EczemaWiseData <- EczemaWiseData %>%
mutate(
urbanicity = case_when(
RUCA1 == 1 ~ "(1) Metropolitan core",
RUCA1 == 2 ~ "(2) Metropolitan high commute",
RUCA1 == 3 ~ "(3) Metropolitan low commute",
RUCA1 == 4 ~ "(4) Micropolitan core",
RUCA1 == 5 ~ "(5) Micropolitan high commute",
RUCA1 == 6 ~ "(6) Micropolitan low commute",
RUCA1 == 7 ~ "(7) Small town core",
RUCA1 == 8 ~ "(8) Small town high commute",
RUCA1 == 9 ~ "(9) Small town low commute",
RUCA1 == 10 ~ "(10) Rural"
)
) %>%
mutate(
urbanicity_simple = case_when(
RUCA1 %in% c(1, 2, 3) ~ "Metropolitan",
RUCA1 %in% c(4, 5, 6, 7, 8, 9, 10) ~ "Micropolitan/Small Town/Rural"
)
)
# Count the number of users who do not have a role ID of 1.
NotUsers <- as.numeric(sum(EczemaWiseData$role_id != 1))
# Filter the EczemaWise data where rold_is equals 1 (user)
EczemaWiseData <- EczemaWiseData %>% filter(role_id == 1)
# Count the number of NA values in the entire datafrappoolme
InvalidZipCount <- as.numeric(sum(is.na(EczemaWiseData$urbanicity)))
#invalidZips <- EczemaWiseData[is.na(EczemaWiseData$urbanicity), ]
# Filter the EczemaWise data where rold_is equals 1 (user)
EczemaWiseData <- EczemaWiseData %>% filter(is.na(EczemaWiseData$urbanicity) == FALSE)
# Clean enviorment
rm(EW_Database, EW_Database_Credentials, RUCA, ProviderPrepData)
View(EczemaWiseData)
# Install Packages: List all Packages Needed in the All_Packages Variable
All_Packages <- c("dplyr", "tidyverse", "ggplot2", "knitr", "kableExtra", "gridExtra", "cowplot", "ggpubr", "reshape2", "readxl", "janitor", "RODBC", "odbc", "RPostgres", "yaml", "rmarkdown", "htmltools", "xtable", "caret")
New_Packages <- All_Packages[!(All_Packages %in% installed.packages()[,"Package"])]
if(length(New_Packages)) install.packages(New_Packages)
# Load Packages
library(dplyr)
library(tidyverse)
library(knitr)
library(ggplot2)
library(kableExtra)
library(gridExtra)
library(cowplot)
library(ggpubr)
library(reshape2)
library(readxl)
library(janitor)
library(RODBC)
library(odbc)
library(RPostgres)
library(yaml)
library(rmarkdown)
library(htmltools)
library(xtable)
# Empty Global Environment
rm(list = ls())
# Read credentials from YAML file
EW_Database_Credentials <- yaml::read_yaml("G:\\.shortcut-targets-by-id\\0B_jvJu6-GsL_ZVQtb2ZVeHhnNlk\\Research\\For Bryan\\SQL\\Credentials\\EW_Database_Credentials.yaml")
# Connect to EW Database
EW_Database <- dbConnect(
RPostgres::Postgres(),
dbname = EW_Database_Credentials$database$dbname,
host = EW_Database_Credentials$database$host,
port = EW_Database_Credentials$database$port,
user = EW_Database_Credentials$database$user,
password = EW_Database_Credentials$database$password
)
# Function to create and format tables with percentages multiplied by 100 and rounded
create_formatted_table <- function(data, variable, custom_names = NULL) {
# Convert variable to factor with explicit levels and sort levels by frequency
data[[variable]] <- forcats::fct_infreq(factor(data[[variable]]))
# Create frequency table without the "Number" column
table_data <- janitor::tabyl(data[[variable]], show_na = FALSE) %>%
janitor::remove_empty()
# Rename columns if custom_names are provided
if (!is.null(custom_names)) {
names(table_data) <- custom_names
}
# Calculate percentage, multiply by 100, and round to 2 decimal places
table_data$Percentage <- round(100 * table_data$Percentage, 2)
# Sort by Percentage column (assuming it's the second column)
table_data <- table_data %>%
dplyr::arrange(desc(Percentage))
formatted_table <- table_data %>%
knitr::kable("html", escape = FALSE) %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
return(formatted_table)
}
# SQL Query for selecting IDs and key variables
EczemaWiseData <- paste(readLines("G:\\.shortcut-targets-by-id\\0B_jvJu6-GsL_ZVQtb2ZVeHhnNlk\\Research\\For Bryan\\SQL\\User Statistics.sql"), collapse = " ")
# Execute the query and store the result in a data frame
EczemaWiseData <- dbGetQuery(EW_Database, EczemaWiseData)
# SQL Query for selecting Provider Prep data
ProviderPrepData <- paste(readLines("G:\\.shortcut-targets-by-id\\0B_jvJu6-GsL_ZVQtb2ZVeHhnNlk\\Research\\For Bryan\\SQL\\Provider Prep Pull.sql"), collapse = " ")
# Execute the query and store the result in a data frame
ProviderPrepData <- dbGetQuery(EW_Database, ProviderPrepData)
# Close the database connection when done
dbDisconnect(EW_Database)
# Import RUCA Data
RUCA <- read_excel("G:\\.shortcut-targets-by-id\\0B_jvJu6-GsL_ZVQtb2ZVeHhnNlk\\Research\\For Bryan\\Dashboards\\Dependencies for Dashboards\\RUCA2010Data.xlsx")
# Rename RUCA data
RUCA <- select(RUCA, zip = ZIP_CODE, state_abv = STATE, RUCA1)
# Merge RUCA states to EW zips
EczemaWiseData <- merge(EczemaWiseData, RUCA, all.x = TRUE)
# Merge RUCA states to EW zips
EczemaWiseData <- merge(ProviderPrepData, EczemaWiseData, all.x = TRUE)
# Recode RUCA Values
EczemaWiseData <- EczemaWiseData %>%
mutate(
urbanicity = case_when(
RUCA1 == 1 ~ "(1) Metropolitan core",
RUCA1 == 2 ~ "(2) Metropolitan high commute",
RUCA1 == 3 ~ "(3) Metropolitan low commute",
RUCA1 == 4 ~ "(4) Micropolitan core",
RUCA1 == 5 ~ "(5) Micropolitan high commute",
RUCA1 == 6 ~ "(6) Micropolitan low commute",
RUCA1 == 7 ~ "(7) Small town core",
RUCA1 == 8 ~ "(8) Small town high commute",
RUCA1 == 9 ~ "(9) Small town low commute",
RUCA1 == 10 ~ "(10) Rural"
)
) %>%
mutate(
urbanicity_simple = case_when(
RUCA1 %in% c(1, 2, 3) ~ "Metropolitan",
RUCA1 %in% c(4, 5, 6, 7, 8, 9, 10) ~ "Micropolitan/Small Town/Rural"
)
)
# Count the number of users who do not have a role ID of 1.
NotUsers <- as.numeric(sum(EczemaWiseData$role_id != 1))
# Filter the EczemaWise data where rold_is equals 1 (user)
EczemaWiseData <- EczemaWiseData %>% filter(role_id == 1)
# Count the number of NA values in the entire datafrappoolme
InvalidZipCount <- as.numeric(sum(is.na(EczemaWiseData$urbanicity)))
#invalidZips <- EczemaWiseData[is.na(EczemaWiseData$urbanicity), ]
# Filter the EczemaWise data where rold_is equals 1 (user)
EczemaWiseData <- EczemaWiseData %>% filter(is.na(EczemaWiseData$urbanicity) == FALSE)
# Clean enviorment
rm(EW_Database, EW_Database_Credentials, RUCA, ProviderPrepData)
View(EczemaWiseData)
# Install and Load Required Packages
All_Packages <- c(
"dplyr", "tidyverse", "ggplot2", "knitr", "kableExtra",
"gridExtra", "cowplot", "ggpubr", "reshape2", "readxl",
"janitor", "RODBC", "odbc", "RPostgres", "yaml",
"rmarkdown", "htmltools", "xtable", "caret"
)
# Install missing packages
New_Packages <- setdiff(All_Packages, installed.packages()[, "Package"])
if (length(New_Packages)) install.packages(New_Packages)
# Load all packages dynamically
invisible(lapply(All_Packages, library, character.only = TRUE))
# Clear Global Environment
rm(list = ls())
# Read credentials from YAML file
EW_Database_Credentials <- yaml::read_yaml("G:\\.shortcut-targets-by-id\\0B_jvJu6-GsL_ZVQtb2ZVeHhnNlk\\Research\\For Bryan\\SQL\\Credentials\\EW_Database_Credentials.yaml")
# Connect to EW Database
EW_Database <- dbConnect(
RPostgres::Postgres(),
dbname = EW_Database_Credentials$database$dbname,
host = EW_Database_Credentials$database$host,
port = EW_Database_Credentials$database$port,
user = EW_Database_Credentials$database$user,
password = EW_Database_Credentials$database$password
)
# Connect to EW Database
EW_Database <- dbConnect(
RPostgres::Postgres(),
dbname = EW_Database_Credentials$database$dbname,
host = EW_Database_Credentials$database$host,
port = EW_Database_Credentials$database$port,
user = EW_Database_Credentials$database$user,
password = EW_Database_Credentials$database$password
)
# Install and Load Required Packages
All_Packages <- c(
"dplyr", "tidyverse", "ggplot2", "knitr", "kableExtra",
"gridExtra", "cowplot", "ggpubr", "reshape2", "readxl",
"janitor", "RODBC", "odbc", "RPostgres", "yaml",
"rmarkdown", "htmltools", "xtable", "caret"
)
# Install missing packages
New_Packages <- setdiff(All_Packages, installed.packages()[, "Package"])
if (length(New_Packages)) install.packages(New_Packages)
# Load all packages dynamically
invisible(lapply(All_Packages, library, character.only = TRUE))
# Clear Global Environment
rm(list = ls())
# Read credentials from YAML file
EW_Database_Credentials <- yaml::read_yaml("G:\\.shortcut-targets-by-id\\0B_jvJu6-GsL_ZVQtb2ZVeHhnNlk\\Research\\For Bryan\\SQL\\Credentials\\EW_Database_Credentials.yaml")
# Connect to EW Database
EW_Database <- dbConnect(
RPostgres::Postgres(),
dbname = EW_Database_Credentials$database$dbname,
host = EW_Database_Credentials$database$host,
port = EW_Database_Credentials$database$port,
user = EW_Database_Credentials$database$user,
password = EW_Database_Credentials$database$password
)
# SQL Query for selecting IDs and key variables
EczemaWiseData <- paste(readLines("G:\\.shortcut-targets-by-id\\0B_jvJu6-GsL_ZVQtb2ZVeHhnNlk\\Research\\For Bryan\\SQL\\User Statistics.sql"), collapse = " ")
# Execute the query and store the result in a data frame
EczemaWiseData <- dbGetQuery(EW_Database, EczemaWiseData)
# SQL Query for selecting Provider Prep data
ProviderPrepData <- paste(readLines("G:\\.shortcut-targets-by-id\\0B_jvJu6-GsL_ZVQtb2ZVeHhnNlk\\Research\\For Bryan\\SQL\\Provider Prep Pull.sql"), collapse = " ")
# Execute the query and store the result in a data frame
ProviderPrepData <- dbGetQuery(EW_Database, ProviderPrepData)
# Close the database connection when done
dbDisconnect(EW_Database)
# Import RUCA Data
RUCA <- read_excel("G:\\.shortcut-targets-by-id\\0B_jvJu6-GsL_ZVQtb2ZVeHhnNlk\\Research\\For Bryan\\Dashboards\\Dependencies for Dashboards\\RUCA2010Data.xlsx")
# Rename RUCA data
RUCA <- select(RUCA, zip = ZIP_CODE, state_abv = STATE, RUCA1)
# Merge RUCA states to EW zips
EczemaWiseData <- merge(EczemaWiseData, RUCA, all.x = TRUE)
# Merge RUCA states to EW zips
EczemaWiseData <- merge(ProviderPrepData, EczemaWiseData, all.x = TRUE)
# Recode RUCA Values
EczemaWiseData <- EczemaWiseData %>%
mutate(
urbanicity = case_when(
RUCA1 == 1 ~ "(1) Metropolitan core",
RUCA1 == 2 ~ "(2) Metropolitan high commute",
RUCA1 == 3 ~ "(3) Metropolitan low commute",
RUCA1 == 4 ~ "(4) Micropolitan core",
RUCA1 == 5 ~ "(5) Micropolitan high commute",
RUCA1 == 6 ~ "(6) Micropolitan low commute",
RUCA1 == 7 ~ "(7) Small town core",
RUCA1 == 8 ~ "(8) Small town high commute",
RUCA1 == 9 ~ "(9) Small town low commute",
RUCA1 == 10 ~ "(10) Rural"
)
) %>%
mutate(
urbanicity_simple = case_when(
RUCA1 %in% c(1, 2, 3) ~ "Metropolitan",
RUCA1 %in% c(4, 5, 6, 7, 8, 9, 10) ~ "Micropolitan/Small Town/Rural"
)
)
# Count the number of users who do not have a role ID of 1.
NotUsers <- as.numeric(sum(EczemaWiseData$role_id != 1))
# Filter the EczemaWise data where rold_is equals 1 (user)
EczemaWiseData <- EczemaWiseData %>% filter(role_id == 1)
# Count the number of NA values in the entire datafrappoolme
InvalidZipCount <- as.numeric(sum(is.na(EczemaWiseData$urbanicity)))
#invalidZips <- EczemaWiseData[is.na(EczemaWiseData$urbanicity), ]
# Filter the EczemaWise data where rold_is equals 1 (user)
EczemaWiseData <- EczemaWiseData %>% filter(is.na(EczemaWiseData$urbanicity) == FALSE)
# Clean enviorment
rm(EW_Database, EW_Database_Credentials, RUCA, ProviderPrepData)
# Install and Load Required Packages
All_Packages <- c(
"dplyr", "tidyverse", "ggplot2", "knitr", "kableExtra",
"gridExtra", "cowplot", "ggpubr", "reshape2", "readxl",
"janitor", "RODBC", "odbc", "RPostgres", "yaml",
"rmarkdown", "htmltools", "xtable", "caret", "dad")
# Install missing packages
New_Packages <- setdiff(All_Packages, installed.packages()[, "Package"])
if (length(New_Packages)) install.packages(New_Packages)
# Load all packages dynamically
invisible(lapply(All_Packages, library, character.only = TRUE))
# Clear Global Environment
rm(list = ls())
# Install and Load Required Packages
All_Packages <- c(
"dplyr", "tidyverse", "ggplot2", "knitr", "kableExtra",
"gridExtra", "cowplot", "ggpubr", "reshape2", "readxl",
"janitor", "RODBC", "odbc", "RPostgres", "yaml",
"rmarkdown", "htmltools", "xtable", "caret", "dad")
# Install missing packages
New_Packages <- setdiff(All_Packages, installed.packages()[, "Package"])
# Install and Load Required Packages
All_Packages <- c(
"dplyr", "tidyverse", "ggplot2", "knitr", "kableExtra",
"gridExtra", "cowplot", "ggpubr", "reshape2", "readxl",
"janitor", "RODBC", "odbc", "RPostgres", "yaml",
"rmarkdown", "htmltools", "xtable", "caret", "dad")
# Install missing packages
New_Packages <- setdiff(All_Packages, installed.packages()[, "Package"])
if (length(New_Packages)) install.packages(New_Packages)
# Load all packages dynamically
invisible(lapply(All_Packages, library, character.only = TRUE))
# Clear Global Environment
rm(list = ls())
# Empty Global Environment
rm(list = ls())
# Packages
library(shiny)
library(shinythemes)
library(DT)
library(dplyr)
# Source the project files
source("projects/project1.R")
source("projects/project2.R")
# Main UI
ui <- navbarPage(
title = "My Portfolio",
theme = shinytheme("flatly"),
collapsible = TRUE,
# Home Tab
tabPanel(
"Home",
fluidPage(
titlePanel("Welcome to My Portfolio"),
fluidRow(
column(12, h3("About Me")),
column(12, p("I am a Data Scientist with expertise in R, Python, machine learning, and data visualization."))
),
fluidRow(
column(6,
h4("Skills"),
tags$ul(
tags$li("R Programming"),
tags$li("Python"),
tags$li("Machine Learning"),
tags$li("Data Visualization"),
tags$li("Cloud Computing"),
tags$li("EEG and fMRI Data Processing")
)
),
column(6,
h4("Experience"),
p("7+ years of experience, including Stanford University RAPID Project, National Eczema Association, and more.")
)
)
)
),
# Projects Tab
tabPanel(
"Projects",
fluidPage(
titlePanel("My Projects"),
fluidRow(
column(4,
h4("Audience Segmentation Tool"),
p("A dashboard designed to empower non-technical staff to interact with a database and generate user ID lists based on specific filtering criteria."),
actionButton("view_proj1", "View Project")
),
column(4,
h4("Project 2 - PDF Example"),
p("A sample project demonstrating how to display a PDF."),
actionButton("view_proj2", "View Project")
)
)
)
)
)
# Main Server
server <- function(input, output, session) {
# Manage navigation to Project 1
observeEvent(input$view_proj1, {
showModal(modalDialog(
title = "Audience Segmentation Tool",
size = "l",
project1UI("proj1"),
footer = modalButton("Close")
))
})
# Call Project 1 module
callModule(project1Server, "proj1")
# Manage navigation to Project 2
observeEvent(input$view_proj2, {
showModal(modalDialog(
title = "Project 2 - PDF Report",
size = "l",
project2UI("proj2"),
footer = modalButton("Close")
))
})
# Call Project 2 module
callModule(project2Server, "proj2")
}
# Run the app
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinylive::export(appdir = "Portfolio", destdir = "docs")
getwd()
# Render app
shinylive::export(appdir = "C://Users//bryan//OneDrive//Desktop//Portfolio//Portfolio", destdir = "docs")
# Render app
shinylive::export(appdir = "C://Users//bryan//OneDrive//Desktop//Portfolio", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
runApp()
